// Clash配置管理器
export class ClashConfigManager {
    constructor() {
        this.storageKey = 'clash-config';
        this.defaultConfig = this.getDefaultConfig();
    }

    /**
     * 生成YAML格式的配置文件
     * @param {Object} config - 配置对象
     * @returns {string} YAML格式的配置字符串
     */
    generateYaml(config) {
        try {
            let yaml = '';
            
            // 添加注释头
            yaml += '# Clash Config Generated by Clash Config Manager\n';
            yaml += `# Generated at: ${new Date().toISOString()}\n\n`;
            
            // 通用设置
            yaml += '# 通用设置\n';
            yaml += `mode: ${config.mode || 'rule'}\n`;
            yaml += `log-level: ${config['log-level'] || 'info'}\n`;
            if (config.port) yaml += `port: ${config.port}\n`;
            if (config['socks-port']) yaml += `socks-port: ${config['socks-port']}\n`;
            yaml += '\n';

            // DNS配置
            if (config.dns) {
                yaml += '# DNS模块\n';
                yaml += 'dns:\n';
                
                if (config.dns['default-nameserver']) {
                    yaml += '  default-nameserver:\n';
                    config.dns['default-nameserver'].forEach(ns => {
                        yaml += `    - ${ns}\n`;
                    });
                }
                
                if (config.dns.nameserver) {
                    yaml += '  nameserver:\n';
                    config.dns.nameserver.forEach(ns => {
                        yaml += `    - ${ns}\n`;
                    });
                }
                
                if (config.dns['fake-ip-filter']) {
                    yaml += '  fake-ip-filter:\n';
                    config.dns['fake-ip-filter'].forEach(filter => {
                        yaml += `    - ${filter}\n`;
                    });
                }
                yaml += '\n';
            }

            // 代理服务提供商
            if (config['proxy-providers'] && Object.keys(config['proxy-providers']).length > 0) {
                yaml += '# 服务提供商\n';
                yaml += 'proxy-providers:\n';
                
                Object.entries(config['proxy-providers']).forEach(([name, provider]) => {
                    yaml += `  ${name}:\n`;
                    yaml += `    url: ${provider.url}\n`;
                    yaml += `    interval: ${provider.interval || 86400}\n`;
                    if (provider['benchmark-url']) {
                        yaml += `    benchmark-url: ${provider['benchmark-url']}\n`;
                    }
                    if (provider['benchmark-timeout']) {
                        yaml += `    benchmark-timeout: ${provider['benchmark-timeout']}\n`;
                    }
                });
                yaml += '\n';
            }

            // 代理组
            if (config['proxy-groups'] && config['proxy-groups'].length > 0) {
                yaml += '# 代理组\n';
                yaml += 'proxy-groups:\n';
                
                config['proxy-groups'].forEach(group => {
                    yaml += `  - name: ${group.name}\n`;
                    yaml += `    type: ${group.type}\n`;
                    
                    if (group.icon) {
                        yaml += `    icon: ${group.icon}\n`;
                    }
                    
                    if (group.proxies && group.proxies.length > 0) {
                        yaml += '    proxies:\n';
                        group.proxies.forEach(proxy => {
                            yaml += `      - ${proxy}\n`;
                        });
                    }
                    
                    if (group.use && group.use.length > 0) {
                        yaml += '    use:\n';
                        group.use.forEach(provider => {
                            yaml += `      - ${provider}\n`;
                        });
                    }
                    
                    if (group.filter) {
                        yaml += `    filter: ${group.filter}\n`;
                    }
                    
                    if (group.interval) {
                        yaml += `    interval: ${group.interval}\n`;
                    }
                    
                    if (group.lazy !== undefined) {
                        yaml += `    lazy: ${group.lazy}\n`;
                    }
                    
                    if (group.hidden !== undefined) {
                        yaml += `    hidden: ${group.hidden}\n`;
                    }
                    
                    if (group['include-all'] !== undefined) {
                        yaml += `    include-all: ${group['include-all']}\n`;
                    }
                    
                    if (group.strategy) {
                        yaml += `    strategy: ${group.strategy}\n`;
                    }
                });
                yaml += '\n';
            }

            // 规则
            if (config.rules && config.rules.length > 0) {
                yaml += '# 规则\n';
                yaml += 'rules:\n';
                config.rules.forEach(rule => {
                    yaml += `  - ${rule}\n`;
                });
                yaml += '\n';
            }

            // 规则提供商
            if (config['rule-providers'] && Object.keys(config['rule-providers']).length > 0) {
                yaml += '# 规则提供商\n';
                yaml += 'rule-providers:\n';
                
                Object.entries(config['rule-providers']).forEach(([name, provider]) => {
                    yaml += `  ${name}:\n`;
                    yaml += `    behavior: ${provider.behavior || 'classical'}\n`;
                    yaml += `    format: ${provider.format || 'text'}\n`;
                    yaml += `    interval: ${provider.interval || 86400}\n`;
                    yaml += `    url: ${provider.url}\n`;
                });
            }

            return yaml;
        } catch (error) {
            console.error('生成YAML失败:', error);
            throw new Error('生成YAML配置失败: ' + error.message);
        }
    }

    /**
     * 解析YAML配置文件
     * @param {string} yamlContent - YAML内容
     * @returns {Object} 解析后的配置对象
     */
    parseYaml(yamlContent) {
        try {
            // 简单的YAML解析器（仅支持基本格式）
            const lines = yamlContent.split('\n');
            const config = {};
            let currentSection = null;
            let currentObject = null;
            let currentArray = null;
            let indentLevel = 0;

            for (let line of lines) {
                line = line.trim();
                
                // 跳过注释和空行
                if (!line || line.startsWith('#')) continue;
                
                // 检测缩进级别
                const originalLine = lines[lines.indexOf(line)];
                const currentIndent = originalLine.length - originalLine.trimLeft().length;
                
                if (line.includes(':')) {
                    const [key, value] = line.split(':').map(s => s.trim());
                    
                    if (value) {
                        // 简单键值对
                        if (currentIndent === 0) {
                            config[key] = this.parseValue(value);
                        } else if (currentSection) {
                            if (!config[currentSection]) config[currentSection] = {};
                            config[currentSection][key] = this.parseValue(value);
                        }
                    } else {
                        // 新的节或对象
                        if (currentIndent === 0) {
                            currentSection = key;
                            config[key] = {};
                        }
                    }
                } else if (line.startsWith('-')) {
                    // 数组项
                    const value = line.substring(1).trim();
                    if (currentSection && Array.isArray(config[currentSection])) {
                        config[currentSection].push(this.parseValue(value));
                    }
                }
            }

            return config;
        } catch (error) {
            console.error('解析YAML失败:', error);
            throw new Error('解析YAML配置失败: ' + error.message);
        }
    }

    /**
     * 解析配置值
     * @param {string} value - 原始值
     * @returns {any} 解析后的值
     */
    parseValue(value) {
        if (!value) return '';
        
        // 移除引号
        if ((value.startsWith('"') && value.endsWith('"')) || 
            (value.startsWith("'") && value.endsWith("'"))) {
            return value.slice(1, -1);
        }
        
        // 布尔值
        if (value === 'true') return true;
        if (value === 'false') return false;
        
        // 数字
        if (!isNaN(value) && !isNaN(parseFloat(value))) {
            return parseFloat(value);
        }
        
        return value;
    }

    /**
     * 保存配置到本地存储
     * @param {Object} config - 配置对象
     */
    saveConfig(config) {
        try {
            localStorage.setItem(this.storageKey, JSON.stringify(config));
            console.log('配置已保存到本地存储');
        } catch (error) {
            console.error('保存配置失败:', error);
            throw new Error('保存配置失败: ' + error.message);
        }
    }

    /**
     * 从本地存储加载配置
     * @returns {Object|null} 配置对象或null
     */
    loadConfig() {
        try {
            const saved = localStorage.getItem(this.storageKey);
            if (saved) {
                return JSON.parse(saved);
            }
            return null;
        } catch (error) {
            console.error('加载配置失败:', error);
            return null;
        }
    }

    /**
     * 导入配置文件
     * @returns {Promise<Object>} 导入的配置对象
     */
    async importConfig() {
        return new Promise((resolve, reject) => {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.yaml,.yml,.json';
            
            input.onchange = async (e) => {
                try {
                    const file = e.target.files[0];
                    if (!file) {
                        resolve(null);
                        return;
                    }
                    
                    const content = await file.text();
                    let config;
                    
                    if (file.name.endsWith('.json')) {
                        config = JSON.parse(content);
                    } else {
                        config = this.parseYaml(content);
                    }
                    
                    resolve(config);
                } catch (error) {
                    reject(error);
                }
            };
            
            input.click();
        });
    }

    /**
     * 导出配置文件
     * @param {Object} config - 配置对象
     * @param {string} format - 导出格式 ('yaml' 或 'json')
     */
    async exportConfig(config, format = 'yaml') {
        try {
            let content;
            let filename;
            let mimeType;
            
            if (format === 'json') {
                content = JSON.stringify(config, null, 2);
                filename = 'clash-config.json';
                mimeType = 'application/json';
            } else {
                content = this.generateYaml(config);
                filename = 'clash-config.yaml';
                mimeType = 'text/yaml';
            }
            
            const blob = new Blob([content], { type: mimeType });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.click();
            
            URL.revokeObjectURL(url);
        } catch (error) {
            console.error('导出配置失败:', error);
            throw new Error('导出配置失败: ' + error.message);
        }
    }

    /**
     * 获取默认配置
     * @returns {Object} 默认配置对象
     */
    getDefaultConfig() {
        return {
            mode: 'rule',
            'log-level': 'info',
            port: 7890,
            'socks-port': 7891,
            dns: {
                'default-nameserver': ['119.29.29.29', '223.5.5.5'],
                nameserver: ['https://dns.alidns.com/dns-query', 'https://doh.pub/dns-query'],
                'fake-ip-filter': ['"*"', '"+.lan"', '"+.local"']
            },
            'proxy-providers': {},
            'proxy-groups': [],
            rules: [],
            'rule-providers': {}
        };
    }

    /**
     * 重置为默认配置
     */
    resetToDefault() {
        const defaultConfig = this.getDefaultConfig();
        this.saveConfig(defaultConfig);
        return defaultConfig;
    }

    /**
     * 清除所有保存的配置
     */
    clearConfig() {
        localStorage.removeItem(this.storageKey);
    }
}
